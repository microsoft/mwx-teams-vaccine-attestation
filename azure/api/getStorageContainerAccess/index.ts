/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";
import { Context, HttpRequest } from "@azure/functions";
import { ApiInitResult } from "../shared/ApiTypes";
const { BlobServiceClient, ContainerGenerateSasUrlOptions } = require('@azure/storage-blob');
const { initializeApi  } = require('./../shared/ApiServices');


interface Response {
  status: number;
  body: { [key: string]: any };
}

type TeamsfxContext = { [key: string]: any };

/**
 * This function handles requests from teamsfx client.
 * The HTTP request should contain an SSO token queried from Teams in the header.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx SDK with the configuration and calls these APIs:
 * - OnBehalfOfUserCredential() - Construct credential with the received SSO token and initialized configuration.
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - createMicrosoftGraphClient() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxContext: TeamsfxContext,
  containerName: string
): Promise<Response> {
  context.log("HTTP trigger function processed a request.");

  // Initialize response.
  const res: Response = {
    status: 200,
    body: {},
  };

  // Put an echo into response body.
  //res.body.receivedHTTPRequestBody = req.body || "";
  const initResults = initializeApi(context, teamsfxContext);

  if (initResults.isError()) {
    res.status = initResults.responseStatusCode;
    res.body = { 
      error: initResults.errorMessage
    }
    return res;
  }
  
  try {    
    
    // Get a reference to the blob service
    const blobServiceClient = BlobServiceClient.fromConnectionString(process.env["docs_connection"]);
    
    // Get a reference to a container
    const containerClient = blobServiceClient.getContainerClient(containerName);

    // Create the container if it does not exist
    await containerClient.createIfNotExists();
    
    const ipAddress = req.headers['x-forwarded-for'];

    //const containerUrl = 
    // Get the number of minutes the SaS token to be good from settings.
    const sasLifetime = isNaN(Number(process.env["docs_sas_lifetime"])) ? 10 : Number(process.env["docs_sas_lifetime"]);
    const sasOptions = new ContainerGenerateSasUrlOptions();
    sasOptions.startsOn = new Date();
    sasOptions.expiresOn = new Date(new Date().getTime() + (1000 * 60 * sasLifetime));  
    const sasUrl = await containerClient.generateSasUrl()
    res.body = {
      "containerUrl": containerClient.url,
      "containerSasUrl": sasUrl
    };

  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: { error: `Failed to get Storage Container Access.  ${e.message}` },
    };
  }

  return res;
}
