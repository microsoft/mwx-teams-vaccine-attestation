/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";
import { Context, HttpRequest } from "@azure/functions";
import { SubmissionSettings, WorkSite, VaccinationStatus } from "../shared/ApiTypes";
const { initializeApi, executeSqlQuery } = require('../shared/ApiServices');


interface Response {
  status: number;
  body: { [key: string]: any };
}

type TeamsfxContext = { [key: string]: any };

/**
 * This function handles requests from teamsfx client.
 * The HTTP request should contain an SSO token queried from Teams in the header.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx SDK with the configuration and calls these APIs:
 * - OnBehalfOfUserCredential() - Construct credential with the received SSO token and initialized configuration.
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - createMicrosoftGraphClient() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxContext: TeamsfxContext
): Promise<Response> {
  context.log("HTTP trigger function processed a request.");

  // Initialize response.
  const res: Response = {
    status: 200,
    body: {},
  };

  // Put an echo into response body.
  //res.body.receivedHTTPRequestBody = req.body || "";
  const initResults = initializeApi(context, teamsfxContext);

  if (initResults.isError()) {
    res.status = initResults.responseStatusCode;
    res.body = { 
      error: initResults.errorMessage
    }
    return res;
  }
  
  try {    
    const settings:SubmissionSettings = await getApplicationSettings(context);
    settings.workSites = await getWorkSites(context);
    settings.vaccinationStatuses = await getVaccinationStatuses(context);
    res.body = settings;

  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: { error: `Failed to retrieve Submission Settings.  ${e.message}` },
    };
  }

  return res;
}

const getApplicationSettings = async(context: Context,):Promise<SubmissionSettings> => {
  const settings = new SubmissionSettings();        
  const settingsRows:[] = await executeSqlQuery(context, `SELECT [Name], [Value] FROM ApplicationSetting WHERE ([Name] LIKE 'Submission.%' OR [Name] LIKE 'General.%') AND [Name] NOT LIKE 'General.%.GroupId'`);

  settingsRows.forEach(item => {
    switch (item['Name']) {
      case 'General.TestDate.Prompt':
        settings.testDatePrompt = item['Value'];
        break;

      case 'General.VaccinationDate.Prompt':
        settings.vaccinationDatePrompt = item['Value'];
        break;

      case 'General.Worksite.EntityName':
        settings.workSiteEntityName = item['Value'];
        break;

      case 'Submission.Certification.Acknowledgement':
        settings.certificationAcknowledgement = item['Value'];
        break;

      case 'Submission.Certification.Header':
        settings.certificationSectionHeader = item['Value'];
        break;

      case 'Submission.Certification.Prompt':
        settings.certificationLabel = item['Value'];
        break;

      case 'Submission.Certification.SubHeader':
        settings.certificationPrompt = item['Value'];
        break;

      case 'Submission.Employee.Header':
        settings.employeeSectionHeader = item['Value'];
        break;

      case 'Submission.Header':
        settings.header = item['Value'];
        break;

      case 'Submission.OnBehalfOf.Enable':
        settings.showOnBehalfOf = Boolean(item['Value']);
        break;

      case 'Submission.OnBehalfOf.Prompt':
        settings.onBehalfOfLabel = item['Value'];
        break;

      case 'Submission.SendEmail':
        settings.sendSubmissionEmail = Boolean(item['Value']);
        break;

      case 'Submission.VaccintationStatus.Description':
        settings.vaccinationStatusDescription = item['Value'];
        break;

      case 'Submission.VaccintationStatus.Header':
        settings.vaccinationStatusSectionHeader = item['Value'];
        break;

      case 'Submission.VaccintationStatus.Prompt':
        settings.vaccinationStatusLabel = item['Value'];
        break;

      case 'Submission.VaccintationStatus.Text':
        settings.vaccinationStatusSectionBody = item['Value'];
        break;

      case 'Submission.WorkSite.Prompt':
        settings.workSiteLabel = item['Value'];
        break;

    }    
  });

  return settings;
}


const getWorkSites = async(context: Context,):Promise<WorkSite[]> => {
  const workSites:WorkSite[] = [];

  const workSiteRows:[] = await executeSqlQuery(context, `SELECT WorkSiteID, WorkSite FROM WorkSite WHERE Active = 1 ORDER BY WorkSite`);

  workSiteRows.forEach(item => {
    workSites.push({
      id: Number(item['WorkSiteID']),
      text: item['WorkSite'],        
      active: Boolean(item['Active'])
    });
  });

  return workSites;
}

const getVaccinationStatuses = async(context: Context,):Promise<VaccinationStatus[]> => {
  const vaccinationStatuses:VaccinationStatus[] = [];
  
  const vaccinationStatusRows:[] = await executeSqlQuery(context, `SELECT VaccinationStatusID, VaccinationStatus, RequireVaccineDate, RequireTestDate, RequireSupportingDocuments, Active FROM VaccinationStatus WHERE Active = 1 ORDER BY SortOrder`);
    
  vaccinationStatusRows.forEach(item => {
    vaccinationStatuses.push({
        id: Number(item['VaccinationStatusID']),
        text: item['VaccinationStatus'],        
        active: Boolean(item['Active']),
        requireVaxDate: Boolean(item['RequireVaccineDate']),
        requireTestDate: Boolean(item['RequireTestDate']),
        requireDocuments: Boolean(item['RequireSupportingDocuments'])
      });
    });

    return vaccinationStatuses;
  } 